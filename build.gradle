

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'


}

group = 'com.zara'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	// Implementación principal
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.kafka:spring-kafka'

	// Solo compilación
	compileOnly 'org.projectlombok:lombok'

	// Procesadores de anotaciones
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	// Dependencias de prueba
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'com.h2database:h2'

	// Dependencias de tiempo de ejecución
	runtimeOnly 'com.h2database:h2'

	// Dependencias de prueba en tiempo de ejecución
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

jacoco {
	toolVersion = "0.8.10" // Usa la última versión disponible
}

jacocoTestReport {
	dependsOn test // Asegúrate de que las pruebas se ejecuten antes del reporte
	reports {
		xml.required = true
		html.required = true
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

task runJMeter(type: Exec) {
	commandLine 'jmeter', '-n', '-t', 'src/test/load/test-load.jmx', '-l', "${buildDir}/jmeter-results/resultados.jtl", '-j', "${buildDir}/jmeter-logs/log-jmeter.log"
}